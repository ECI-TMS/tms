{{!< dashboard}}

<style>
  .quiz-questions-container {
    background: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f0f0f0;
  }

  .page-title {
    font-size: 1.8rem;
    font-weight: 600;
    color: #2e5a92;
    margin: 0;
  }

  .quiz-info {
    background: linear-gradient(135deg, #2e5a92 0%, #4a7bb8 100%);
    color: white;
    padding: 1.5rem;
    border-radius: 10px;
    margin-bottom: 2rem;
    box-shadow: 0 4px 15px rgba(46, 90, 146, 0.2);
  }

  .quiz-info h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.3rem;
    font-weight: 500;
  }

  .quiz-info p {
    margin: 0;
    opacity: 0.9;
    font-size: 0.95rem;
  }

  .breadcrumb {
    background: transparent;
    padding: 0;
    margin-bottom: 1.5rem;
  }

  .breadcrumb-item {
    color: #6c757d;
    font-size: 0.9rem;
  }

  .breadcrumb-item.active {
    color: #2e5a92;
    font-weight: 500;
  }

  .breadcrumb-item + .breadcrumb-item::before {
    content: ">";
    color: #6c757d;
    margin: 0 0.5rem;
  }

  .action-buttons {
    display: flex;
    gap: 1rem;
  }

  .btn {
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    text-decoration: none;
  }

  .btn-primary {
    background: linear-gradient(135deg, #2e5a92 0%, #4a7bb8 100%);
    color: white;
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, #1e4a82 0%, #3a6ba8 100%);
    color: white;
    transform: translateY(-2px);
  }

  .btn-success {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
  }

  .btn-success:hover {
    background: linear-gradient(135deg, #218838 0%, #1ea085 100%);
    color: white;
    transform: translateY(-2px);
  }

  .btn-warning {
    background: #ffc107;
    color: #212529;
  }

  .btn-warning:hover {
    background: #e0a800;
    color: #212529;
    transform: translateY(-2px);
  }

  .btn-danger {
    background: #dc3545;
    color: white;
  }

  .btn-danger:hover {
    background: #c82333;
    color: white;
    transform: translateY(-2px);
  }

  .questions-table {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    margin-bottom: 2rem;
  }

  .table {
    margin: 0;
  }

  .table thead th {
    background: linear-gradient(135deg, #2e5a92 0%, #4a7bb8 100%);
    color: white;
    border: none;
    padding: 1rem;
    font-weight: 500;
    font-size: 0.95rem;
  }

  .table tbody td {
    padding: 1rem;
    border-bottom: 1px solid #e9ecef;
    vertical-align: middle;
  }

  .table tbody tr:hover {
    background-color: #f8f9fa;
  }

  .table tbody tr:last-child td {
    border-bottom: none;
  }

  .question-number {
    background: #2e5a92;
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .question-text {
    font-weight: 500;
    color: #495057;
    line-height: 1.4;
  }

  .options-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .option-item {
    background: #e9ecef;
    color: #495057;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
  }

  .option-item[data-is-correct="true"] {
    background: #d4edda;
    color: #155724;
    border: 2px solid #c3e6cb;
  }

  .question-actions {
    display: flex;
    gap: 0.5rem;
  }

  .btn-sm {
    padding: 6px 12px;
    font-size: 0.8rem;
  }

  .empty-state {
    text-align: center;
    padding: 3rem 2rem;
    color: #6c757d;
  }

  .empty-state i {
    font-size: 3rem;
    color: #dee2e6;
    margin-bottom: 1rem;
  }

  .empty-state h4 {
    color: #495057;
    margin-bottom: 0.5rem;
  }

  .empty-state p {
    margin-bottom: 1.5rem;
  }

  /* Modal Styles */
  .modal-content {
    border-radius: 12px;
    border: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  .modal-header {
    background: linear-gradient(135deg, #2e5a92 0%, #4a7bb8 100%);
    color: white;
    border-radius: 12px 12px 0 0;
    border-bottom: none;
  }

  .modal-title {
    font-weight: 600;
  }

  .modal-body {
    padding: 2rem;
  }

  .form-label {
    font-weight: 500;
    color: #495057;
    margin-bottom: 0.5rem;
  }

  .form-control {
    border-radius: 8px;
    border: 2px solid #e9ecef;
    padding: 0.75rem 1rem;
    transition: all 0.3s ease;
  }

  .form-control:focus {
    border-color: #2e5a92;
    box-shadow: 0 0 0 0.2rem rgba(46, 90, 146, 0.25);
  }

  .modal-footer {
    border-top: 1px solid #e9ecef;
    padding: 1rem 2rem;
  }

  .btn-modal {
    padding: 0.5rem 1.5rem;
    border-radius: 6px;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .btn-modal-secondary {
    background: #6c757d;
    color: white;
    border: none;
  }

  .btn-modal-secondary:hover {
    background: #5a6268;
    color: white;
  }

  .btn-modal-primary {
    background: linear-gradient(135deg, #2e5a92 0%, #4a7bb8 100%);
    color: white;
    border: none;
  }

  .btn-modal-primary:hover {
    background: linear-gradient(135deg, #1e4a82 0%, #3a6ba8 100%);
    color: white;
  }

  .btn-modal-danger {
    background: #dc3545;
    color: white;
    border: none;
  }

  .btn-modal-danger:hover {
    background: #c82333;
    color: white;
  }

  /* Toast notification styles */
  .toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
  }

  .toast {
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    border: none;
    margin-bottom: 10px;
  }

  .toast-header {
    background: transparent;
    border-bottom: 1px solid #e9ecef;
  }

  .toast-success {
    border-left: 4px solid #28a745;
  }

  .toast-error {
    border-left: 4px solid #dc3545;
  }

  .toast-warning {
    border-left: 4px solid #ffc107;
  }

     .option-input-group {
     margin-bottom: 0.5rem;
   }

   .option-input {
     width: 100%;
   }

  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .action-buttons {
      flex-direction: column;
      width: 100%;
    }

    .question-actions {
      flex-direction: column;
    }

    .options-list {
      flex-direction: column;
    }
  }
</style>

<div class="content">
  <div class="quiz-questions-container">
    <!-- Page Header -->
    <div class="page-header">
      <div>
        <h1 class="page-title">Quiz Questions Management</h1>
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item">
              <a href="/admin/dashboard" style="color: #6c757d; text-decoration: none;">Dashboard</a>
            </li>
                         <li class="breadcrumb-item">
               <a href="/admin/programs/{{session.ProgramID}}/courses/{{session.CourseID}}" style="color: #6c757d; text-decoration: none;">Sessions</a>
             </li>
            <li class="breadcrumb-item">
              <a href="/admin/session/{{session.SessionID}}/quizes" style="color: #6c757d; text-decoration: none;">Session {{session.SessionID}} - Quizzes</a>
            </li>
            <li class="breadcrumb-item active">{{quiz.name}} - Questions</li>
          </ol>
        </nav>
      </div>
      <div class="action-buttons">
        <button class="btn btn-success" onclick="openAddQuestionModal()">
          <i class="fas fa-plus"></i>
          Add Question
        </button>
        <a href="/admin/session/{{session.SessionID}}/quizes" class="btn btn-primary">
          <i class="fas fa-arrow-left"></i>
          Back to Quizzes
        </a>
      </div>
    </div>

    <!-- Quiz Info -->
    <div class="quiz-info">
      <h3>{{quiz.name}}</h3>
      <p><strong>Session ID:</strong> {{session.SessionID}} | <strong>Total Questions:</strong> {{questions.length}} | <strong>Submissions:</strong> {{quiz.SubmittedQuizes.length}}</p>
    </div>

    {{#if questions.length}}
      <!-- Questions Table -->
      <div class="questions-table">
        <table class="table">
          <thead>
            <tr>
              <th style="width: 80px;">#</th>
              <th>Question</th>
              <th>Options</th>
              <th>Correct Answer</th>
              <th style="width: 200px;">Actions</th>
            </tr>
          </thead>
          <tbody>
            {{#each questions}}
              <tr>
                <td>
                  <div class="question-number" data-index="{{@index}}">{{@index}}</div>
                </td>
                <td>
                  <div class="question-text">{{this.question}}</div>
                </td>
                <td>
                  <ul class="options-list">
                    {{#each options}}
                      <li class="option-item" data-is-correct="{{#if (eq this.value ../answer)}}true{{else}}false{{/if}}">
                        {{this.value}}
                      </li>
                    {{/each}}
                  </ul>
                </td>
                <td>
                  <span class="badge bg-success">{{this.answer}}</span>
                </td>
                <td>
                  <div class="question-actions">
                    <button onclick="openEditQuestionModal('{{this.id}}', '{{this.question}}', '{{this.answer}}', '{{this.id}}')" class="btn btn-warning btn-sm">
                      <i class="fas fa-edit"></i>
                      Edit
                    </button>
                    <button onclick="openDeleteQuestionModal('{{this.id}}', '{{this.question}}')" class="btn btn-danger btn-sm">
                      <i class="fas fa-trash"></i>
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    {{else}}
      <!-- Empty State -->
      <div class="empty-state">
        <i class="fas fa-question-circle"></i>
        <h4>No Questions Available</h4>
        <p>This quiz doesn't have any questions yet. Add the first question to get started.</p>
        <button class="btn btn-success" onclick="openAddQuestionModal()">
          <i class="fas fa-plus"></i>
          Add Your First Question
        </button>
      </div>
    {{/if}}
  </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="toast-container"></div>

<!-- Add Question Modal -->
<div id="addQuestionModal" class="modal fade" tabindex="-1" aria-labelledby="addQuestionModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addQuestionModalLabel">
          <i class="fas fa-plus me-2"></i>Add New Question
        </h5>
        <button type="button" class="btn-close btn-close-white" onclick="closeAddQuestionModal()" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addQuestionForm">
          <div class="mb-3">
            <label for="questionText" class="form-label">Question</label>
            <textarea class="form-control" id="questionText" rows="3" placeholder="Enter your question here..." required></textarea>
          </div>
          
                     <div class="mb-3">
             <label class="form-label">Options (All questions must have exactly 4 options)</label>
             <div id="optionsContainer">
               <div class="option-input-group">
                 <input type="text" class="form-control option-input" placeholder="Option 1" required>
               </div>
               <div class="option-input-group">
                 <input type="text" class="form-control option-input" placeholder="Option 2" required>
               </div>
               <div class="option-input-group">
                 <input type="text" class="form-control option-input" placeholder="Option 3" required>
               </div>
               <div class="option-input-group">
                 <input type="text" class="form-control option-input" placeholder="Option 4" required>
               </div>
             </div>
           </div>
          
          <div class="mb-3">
            <label for="correctAnswer" class="form-label">Correct Answer</label>
            <select class="form-control" id="correctAnswer" required>
              <option value="">Select correct answer</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-modal btn-modal-secondary" onclick="closeAddQuestionModal()">
          <i class="fas fa-times me-1"></i>Cancel
        </button>
        <button type="button" class="btn btn-modal btn-modal-primary" onclick="saveQuestion()">
          <i class="fas fa-save me-1"></i>Save Question
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Question Modal -->
<div id="editQuestionModal" class="modal fade" tabindex="-1" aria-labelledby="editQuestionModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editQuestionModalLabel">
          <i class="fas fa-edit me-2"></i>Edit Question
        </h5>
        <button type="button" class="btn-close btn-close-white" onclick="closeEditQuestionModal()" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editQuestionForm">
          <input type="hidden" id="editQuestionId">
          <div class="mb-3">
            <label for="editQuestionText" class="form-label">Question</label>
            <textarea class="form-control" id="editQuestionText" rows="3" placeholder="Enter your question here..." required></textarea>
          </div>
          
                     <div class="mb-3">
             <label class="form-label">Options (All questions must have exactly 4 options)</label>
             <div id="editOptionsContainer">
               <!-- Options will be populated dynamically -->
             </div>
           </div>
          
          <div class="mb-3">
            <label for="editCorrectAnswer" class="form-label">Correct Answer</label>
            <select class="form-control" id="editCorrectAnswer" required>
              <option value="">Select correct answer</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-modal btn-modal-secondary" onclick="closeEditQuestionModal()">
          <i class="fas fa-times me-1"></i>Cancel
        </button>
        <button type="button" class="btn btn-modal btn-modal-primary" onclick="updateQuestion()">
          <i class="fas fa-save me-1"></i>Update Question
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Question Modal -->
<div id="deleteQuestionModal" class="modal fade" tabindex="-1" aria-labelledby="deleteQuestionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteQuestionModalLabel">
          <i class="fas fa-exclamation-triangle me-2"></i>Delete Question
        </h5>
        <button type="button" class="btn-close btn-close-white" onclick="closeDeleteQuestionModal()" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning" role="alert">
          <i class="fas fa-exclamation-triangle me-2"></i>
          <strong>Warning:</strong> This action cannot be undone.
        </div>
        <p>Are you sure you want to delete the question "<strong id="deleteQuestionText"></strong>"?</p>
        <p class="text-muted small">
          This will permanently delete the question and all its options.
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-modal btn-modal-secondary" onclick="closeDeleteQuestionModal()">
          <i class="fas fa-times me-1"></i>Cancel
        </button>
        <button type="button" class="btn btn-modal btn-modal-danger" onclick="confirmDeleteQuestion()">
          <i class="fas fa-trash me-1"></i>Delete Question
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Global variables
  let currentQuestionId = null;
  let currentQuestionData = null;
  const quizId = '{{quiz.id}}';
  const sessionId = '{{session.SessionID}}';

  // Modal Functions
     function openAddQuestionModal() {
     document.getElementById('addQuestionModal').style.display = 'block';
     document.getElementById('addQuestionModal').classList.add('show');
     document.getElementById('questionText').value = '';
     document.getElementById('correctAnswer').innerHTML = '<option value="">Select correct answer</option>';
     
     // Reset options to exactly 4
     const optionsContainer = document.getElementById('optionsContainer');
     optionsContainer.innerHTML = `
       <div class="option-input-group">
         <input type="text" class="form-control option-input" placeholder="Option 1" required>
       </div>
       <div class="option-input-group">
         <input type="text" class="form-control option-input" placeholder="Option 2" required>
       </div>
       <div class="option-input-group">
         <input type="text" class="form-control option-input" placeholder="Option 3" required>
       </div>
       <div class="option-input-group">
         <input type="text" class="form-control option-input" placeholder="Option 4" required>
       </div>
     `;
   }

  function closeAddQuestionModal() {
    document.getElementById('addQuestionModal').style.display = 'none';
    document.getElementById('addQuestionModal').classList.remove('show');
  }

  async function openEditQuestionModal(questionId, question, answer, questionIdParam) {
    currentQuestionId = questionId;
    
    // Fetch question data from the server
    try {
      const response = await fetch(`/admin/quiz/${quizId}/question/${questionId}/data`);
      const data = await response.json();
      
      if (data.success) {
        const questionData = data.question;
        currentQuestionData = questionData;
        
        document.getElementById('editQuestionId').value = questionId;
        document.getElementById('editQuestionText').value = questionData.question;
        
                 // Populate options - ensure exactly 4 options
         const optionsContainer = document.getElementById('editOptionsContainer');
         optionsContainer.innerHTML = '';
         
         // Create exactly 4 option inputs
         for (let i = 0; i < 4; i++) {
           const optionGroup = document.createElement('div');
           optionGroup.className = 'option-input-group';
           const optionValue = questionData.options[i] ? questionData.options[i].value : '';
           optionGroup.innerHTML = `
             <input type="text" class="form-control option-input" value="${optionValue}" placeholder="Option ${i + 1}" required>
           `;
           optionsContainer.appendChild(optionGroup);
         }
        
        // Populate correct answer dropdown
        const correctAnswerSelect = document.getElementById('editCorrectAnswer');
        correctAnswerSelect.innerHTML = '<option value="">Select correct answer</option>';
        questionData.options.forEach(option => {
          const optionElement = document.createElement('option');
          optionElement.value = option.value;
          optionElement.textContent = option.value;
          optionElement.selected = option.value === questionData.answer;
          correctAnswerSelect.appendChild(optionElement);
        });
        
        document.getElementById('editQuestionModal').style.display = 'block';
        document.getElementById('editQuestionModal').classList.add('show');
      } else {
        showToast('Failed to load question data', 'error');
      }
    } catch (error) {
      console.error('Error fetching question data:', error);
      showToast('An error occurred while loading question data', 'error');
    }
  }

  function closeEditQuestionModal() {
    document.getElementById('editQuestionModal').style.display = 'none';
    document.getElementById('editQuestionModal').classList.remove('show');
    currentQuestionId = null;
    currentQuestionData = null;
  }

  function openDeleteQuestionModal(questionId, questionText) {
    currentQuestionId = questionId;
    document.getElementById('deleteQuestionText').textContent = questionText;
    document.getElementById('deleteQuestionModal').style.display = 'block';
    document.getElementById('deleteQuestionModal').classList.add('show');
  }

  function closeDeleteQuestionModal() {
    document.getElementById('deleteQuestionModal').style.display = 'none';
    document.getElementById('deleteQuestionModal').classList.remove('show');
    currentQuestionId = null;
  }

  

  function updateCorrectAnswerOptions() {
    const optionsContainer = document.getElementById('optionsContainer');
    const correctAnswerSelect = document.getElementById('correctAnswer');
    const currentValue = correctAnswerSelect.value;
    
    correctAnswerSelect.innerHTML = '<option value="">Select correct answer</option>';
    
    const optionInputs = optionsContainer.querySelectorAll('.option-input');
    optionInputs.forEach(input => {
      if (input.value.trim()) {
        const option = document.createElement('option');
        option.value = input.value.trim();
        option.textContent = input.value.trim();
        if (option.value === currentValue) {
          option.selected = true;
        }
        correctAnswerSelect.appendChild(option);
      }
    });
  }

  function updateEditCorrectAnswerOptions() {
    const optionsContainer = document.getElementById('editOptionsContainer');
    const correctAnswerSelect = document.getElementById('editCorrectAnswer');
    const currentValue = correctAnswerSelect.value;
    
    correctAnswerSelect.innerHTML = '<option value="">Select correct answer</option>';
    
    const optionInputs = optionsContainer.querySelectorAll('.option-input');
    optionInputs.forEach(input => {
      if (input.value.trim()) {
        const option = document.createElement('option');
        option.value = input.value.trim();
        option.textContent = input.value.trim();
        if (option.value === currentValue) {
          option.selected = true;
        }
        correctAnswerSelect.appendChild(option);
      }
    });
  }

  // API Functions
  async function saveQuestion() {
    const questionText = document.getElementById('questionText').value.trim();
    const correctAnswer = document.getElementById('correctAnswer').value.trim();
    const optionInputs = document.querySelectorAll('#optionsContainer .option-input');
    
    const options = Array.from(optionInputs)
      .map(input => input.value.trim())
      .filter(option => option !== '');
    
    if (!questionText || !correctAnswer || options.length !== 4) {
      showToast('Please fill in all fields and provide exactly 4 options', 'error');
      return;
    }
    
    if (!options.includes(correctAnswer)) {
      showToast('Correct answer must be one of the options', 'error');
      return;
    }
    
    try {
      const response = await fetch(`/admin/quiz/${quizId}/question/add`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question: questionText,
          answer: correctAnswer,
          options: options,
        }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        showToast('Question added successfully', 'success');
        closeAddQuestionModal();
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        showToast(data.message || 'Failed to add question', 'error');
      }
    } catch (error) {
      console.error('Error adding question:', error);
      showToast('An error occurred while adding the question', 'error');
    }
  }

  async function updateQuestion() {
    const questionText = document.getElementById('editQuestionText').value.trim();
    const correctAnswer = document.getElementById('editCorrectAnswer').value.trim();
    const optionInputs = document.querySelectorAll('#editOptionsContainer .option-input');
    
    const options = Array.from(optionInputs)
      .map(input => input.value.trim())
      .filter(option => option !== '');
    
    if (!questionText || !correctAnswer || options.length !== 4) {
      showToast('Please fill in all fields and provide exactly 4 options', 'error');
      return;
    }
    
    if (!options.includes(correctAnswer)) {
      showToast('Correct answer must be one of the options', 'error');
      return;
    }
    
    try {
      const response = await fetch(`/admin/quiz/${quizId}/question/${currentQuestionId}/update`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question: questionText,
          answer: correctAnswer,
          options: options,
        }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        showToast('Question updated successfully', 'success');
        closeEditQuestionModal();
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        showToast(data.message || 'Failed to update question', 'error');
      }
    } catch (error) {
      console.error('Error updating question:', error);
      showToast('An error occurred while updating the question', 'error');
    }
  }

  async function confirmDeleteQuestion() {
    try {
      const response = await fetch(`/admin/quiz/${quizId}/question/${currentQuestionId}/delete`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      const data = await response.json();
      
      if (data.success) {
        showToast('Question deleted successfully', 'success');
        closeDeleteQuestionModal();
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        showToast(data.message || 'Failed to delete question', 'error');
      }
    } catch (error) {
      console.error('Error deleting question:', error);
      showToast('An error occurred while deleting the question', 'error');
    }
  }

  // Toast notification function
  function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer');
    const toastId = 'toast-' + Date.now();
    
    const toastHtml = `
      <div id="${toastId}" class="toast toast-${type} show" role="alert">
        <div class="toast-header">
          <strong class="me-auto">${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
          <button type="button" class="btn-close" onclick="closeToast('${toastId}')"></button>
        </div>
        <div class="toast-body">
          ${message}
        </div>
      </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      closeToast(toastId);
    }, 5000);
  }

  function closeToast(toastId) {
    const toast = document.getElementById(toastId);
    if (toast) {
      toast.remove();
    }
  }

  // Close modals when clicking outside
  window.onclick = function(event) {
    const addModal = document.getElementById('addQuestionModal');
    const editModal = document.getElementById('editQuestionModal');
    const deleteModal = document.getElementById('deleteQuestionModal');
    
    if (event.target === addModal) {
      closeAddQuestionModal();
    }
    if (event.target === editModal) {
      closeEditQuestionModal();
    }
    if (event.target === deleteModal) {
      closeDeleteQuestionModal();
    }
  }

  // Event listeners for option inputs
  document.addEventListener('DOMContentLoaded', function() {
    // Update question numbers to start from 1
    const questionNumbers = document.querySelectorAll('.question-number');
    questionNumbers.forEach((element, index) => {
      element.textContent = index + 1;
    });
    
    // Add event listeners for option inputs in add modal
    document.addEventListener('input', function(e) {
      if (e.target.classList.contains('option-input') && e.target.closest('#optionsContainer')) {
        updateCorrectAnswerOptions();
      }
      if (e.target.classList.contains('option-input') && e.target.closest('#editOptionsContainer')) {
        updateEditCorrectAnswerOptions();
      }
    });
  });
</script>
    