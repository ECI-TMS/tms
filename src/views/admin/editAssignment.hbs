{{!< dashboard}}

<style>
  body {
    font-family: 'Poppins', sans-serif;
    background-color: #fff;
    color: #000;
  }

  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .form-container {
    background-color: #f8f9fa;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
  }

  .form-label {
    font-weight: 600;
    color: #2E5A92;
    margin-bottom: 8px;
  }

  .form-control, .form-select {
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 12px;
    font-size: 16px;
    transition: border-color 0.3s ease;
  }

  .form-control:focus, .form-select:focus {
    border-color: #2E5A92;
    box-shadow: 0 0 0 0.2rem rgba(46, 90, 146, 0.25);
  }

  .btn-primary {
    background-color: #2E5A92;
    border: none;
    padding: 12px 30px;
    border-radius: 8px;
    font-weight: 600;
    transition: background-color 0.3s ease;
  }

  .btn-primary:hover {
    background-color: #1e4a7a;
  }

  .btn-secondary {
    background-color: #6c757d;
    border: none;
    padding: 12px 30px;
    border-radius: 8px;
    font-weight: 600;
    transition: background-color 0.3s ease;
  }

  .btn-secondary:hover {
    background-color: #5a6268;
  }

  .assignment-info {
    background: linear-gradient(135deg, #2E5A92, #4a7bc8);
    color: white;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 30px;
    text-align: center;
  }

  .assignment-icon {
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 15px;
    font-size: 24px;
  }

  .assignment-title {
    font-size: 20px;
    font-weight: 700;
    margin-bottom: 5px;
  }

  .assignment-id {
    font-size: 14px;
    opacity: 0.9;
  }

  .current-file {
    background: rgba(46, 90, 146, 0.1);
    border: 1px solid rgba(46, 90, 146, 0.2);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
  }

  .current-file-label {
    font-weight: 600;
    color: #2E5A92;
    margin-bottom: 8px;
  }

  .current-file-link {
    color: #2E5A92;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 6px;
  }

  .current-file-link:hover {
    text-decoration: underline;
  }

  .alert {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    border-radius: 8px;
    font-weight: 500;
    margin-bottom: 20px;
  }

  .alert-danger {
    background-color: rgba(220, 53, 69, 0.1);
    color: #dc3545;
    border: 1px solid rgba(220, 53, 69, 0.2);
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>

<div class="container mt-4">
  <div class="form-container">
    <div class="assignment-info">
      <div class="assignment-icon">ðŸ“š</div>
      <div class="assignment-title">{{assignment.Title}}</div>
      <div class="assignment-id">Assignment #{{assignment.AssignmentID}}</div>
    </div>

    <h3 class="mb-4 text-center" style="color: #2E5A92;">Edit Assignment Details</h3>
    
    <!-- Error Message Display -->
    <div id="errorMessage" class="alert alert-danger" style="display: none;">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 8px;">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
      </svg>
      <span id="errorText"></span>
    </div>
    
    <form action="/admin/assignment/{{assignment.AssignmentID}}/edit" method="POST" class="needs-validation" novalidate id="editAssignmentForm" enctype="multipart/form-data">
      
      <div class="row">
        <div class="col-12 mb-3">
          <label for="title" class="form-label">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
              <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
            </svg>
            Assignment Title
          </label>
          <input 
            type="text" 
            name="Title" 
            class="form-control" 
            id="title" 
            value="{{assignment.Title}}"
            placeholder="Enter assignment title" 
            required 
          />
          <div class="invalid-feedback">Please provide a valid title.</div>
        </div>
      </div>

      <div class="row">
        <div class="col-md-6 mb-3">
          <label for="deadline" class="form-label">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
              <path d="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,19H5V8H19V19M17,10H7V12H17V10M15,14H7V16H15V14M10,6H7V8H10V6Z"/>
            </svg>
            Deadline
          </label>
          <input 
            type="date" 
            name="Deadline" 
            class="form-control" 
            id="deadline" 
            value="{{formatDateForInput assignment.Deadline}}"
            required 
          />
          <div class="invalid-feedback">Please provide a valid deadline.</div>
        </div>
        
        <div class="col-md-6 mb-3">
          <label for="template" class="form-label">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
              <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
            </svg>
            Template File (Optional)
          </label>
          <input 
            type="file" 
            name="template" 
            class="form-control" 
            id="template"
            accept=".pdf,.doc,.docx,.txt,.zip,.rar"
          />
          <div class="invalid-feedback">Please provide a valid file.</div>
        </div>
      </div>

      {{#if assignment.FilePath}}
      <div class="current-file">
        <div class="current-file-label">Current Template File:</div>
        <a href="{{assignment.FilePath}}" class="current-file-link" download="{{getFilename assignment.FilePath}}" id="currentFileName">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
            <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
          </svg>
          {{getFilename assignment.FilePath}}
        </a>
      </div>
      {{/if}}

      <div class="d-flex gap-2 justify-content-end">
        <a href="/admin/session/{{assignment.SessionID}}/assignments" class="btn btn-secondary">Cancel</a>
        <button class="btn btn-primary" type="submit">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 8px;">
            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
          </svg>
          Update Assignment
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('editAssignmentForm');
    const errorMessage = document.getElementById('errorMessage');
    const errorText = document.getElementById('errorText');
    
    // Form validation and submission
    form.addEventListener('submit', async function(event) {
      event.preventDefault();
      
      // Hide any previous error messages
      errorMessage.style.display = 'none';
      
      // Check form validity
      if (!form.checkValidity()) {
        form.classList.add('was-validated');
        return;
      }
      
      // Additional file validation
      const fileInput = document.getElementById('template');
      if (fileInput.files.length > 0) {
        const file = fileInput.files[0];
        const allowedTypes = ['.pdf', '.doc', '.docx', '.txt', '.zip', '.rar'];
        const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
        
        if (!allowedTypes.includes(fileExtension)) {
          showError('Please select a valid file type. Allowed types: PDF, DOC, DOCX, TXT, ZIP, RAR');
          return;
        }
        
        if (file.size > 10 * 1024 * 1024) { // 10MB limit
          showError('File size must be less than 10MB');
          return;
        }
      }
      
      // Get form data
      const formData = new FormData(form);
      
      try {
        // Show loading state
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 8px; animation: spin 1s linear infinite;"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>Updating...';
        submitBtn.disabled = true;
        
        // Submit form data
        const response = await fetch(form.action, {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          // Success - redirect to assignments list
          window.location.href = '/admin/session/{{assignment.SessionID}}/assignments';
        } else {
          // Handle error response
          const data = await response.json();
          showError(data.error || 'An error occurred while updating the assignment');
        }
      } catch (error) {
        console.error('Error:', error);
        showError('An error occurred while updating the assignment');
      } finally {
        // Reset button state
        const submitBtn = form.querySelector('button[type="submit"]');
        submitBtn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 8px;"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>Update Assignment';
        submitBtn.disabled = false;
      }
    });
    
    // Function to show error message
    function showError(message) {
      errorText.textContent = message;
      errorMessage.style.display = 'flex';
      errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
    

  });
</script>
